Object.is(a,b)  判断a是否是b
Object.assign(obj1,obj2)  合并对象，只是浅拷贝
let des=Object.getOwnPropertyDescriptor(source,key);  获取对象的属性描述
Object.defineProperty(target,key,value); 设置对象的属性
[].concat(arr1,arr2,arr3)  合并几个数组
switch语句必须带有default分支
obj.hasOwnProperty()  永远不会去查找原型
var arr=['1'];
arr[arr.length]='2';
arr.length=1;
console.log(arr[arr.length]);  
html5新特性：1、语义化；2、本地存储性；3、设备访问性；4、连接特性（WebSockets）；
	     5、网页多媒体特性；6、三维与图形与特效（SVG、Canvas、CSS3）；7、性能与集成特性
APP CHACHE浏览器缓存 <html manifest='index.manifest'>
文件清单
CACHE MANIFEST
CACHE:
theme.css
logo.gif
main.js

NETWORK:
login.asp

FALLBACK:
/html5/ /404.html

AMD --> RequireJS   
define(['./a','./b'],function(){// 依赖必须一开始就写好
 a.doSomething()
 // 此处略去 100 行
 b.doSomething()
 ...
})

CDM --> SeaJS
define(function(require,exports,module){
 var a=require('./a');
 a.doSomething();
 // 此处略去 100 行
 var b=require('./b');
 b.doSomething();
 ...
})

‘1’-‘1’；‘1’-‘1’+‘1’；

'use strict' 测试在严格模式和非严格模式下的输出
(function(x){delete x;return x;})(1)

var food='sushi';
(function(){
  if(typeof food==='undefined'){
    var food='huacai';
    console.log('eat'+food);
  }else{
    console.log('eat'+food);
  }
})()//声明前置

Math.ceil(7/2);Math.floor(7/2);Math.round(7/2);(7/2).toFixed(0);

CORS是W3c工作草案，它定义了在跨域访问资源时浏览器和服务器之间如何通信。CORS背后的基本思想是使用自定义的HTTP头部允许浏览器和服务器相互了解对方，从而决定请求或响应成功与否。
JSONP与CORS对比
都能解决 Ajax直接请求普通文件存在跨域无权限访问的问题
1、JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求
2、使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理
3、JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS

WEB性能优化
1、减少HTTP请求
减少图片的请求、减少脚本文件与样式表的请求
图片的减少通常有两种方式：css sprites、内联图片、IconFont。
2、页面内部优化
样式表放在顶部、脚本文件放在底部、避免css表达式、把脚本的样式表放在外部、移除重复脚本
3、启用缓存
4、减少下载量--开启gzip压缩
5、优化网络连接
使用CDN加速、减少DNS查找、避免重定向

CSS的单位
px,em,rem,mm,ex,pt,pc,vw,vh

src与href
href标识超文本引用，用在link和a等元素上，href是引用和页面关联，是在当前元素和引用资源之间建立联系
src表示引用资源，表示替换当前元素，用在img，script，iframe上，src是页面内容不可缺少的一部分

上传（图片）
1)表单上传，form -->enctype="multipart/form-data",type="post";
input -->type="file"
input  -->type="submit"
2)ajax异步无刷新上传，input -->type="file" id="test" name="test",input  -->type="button" 

var formData=new FormData($("#test"));
$.ajax({
	url:"/test.do",
	type:"POST",
	data:formDate,
	processData:false,
	contentType:false,
	success:function(response){

	}
})
3）Flash上传
4）截图粘贴上传
5）拖拽上传

不同浏览器对应的浏览器内核
chrome,firefox,ie9,Opare;webkit,Gecko,Tride,Presto

		function Foo(){
			getName=function(){console.log(1);};
			return this;
		};
		Foo.getName=function(){console.log(2);};
		Foo.prototype.getName=function(){console.log(3);};
		var getName=function(){console.log(4);};
		function getName(){console.log(5);};

		Foo.getName();//2
		getName();//4
		Foo().getName();//1
		getName();//1
		new Foo.getName();//2
		new Foo().getName();//3
		new new Foo().getName();//3
2,4,1,1,2,3,3

onafterpaste 粘贴后出发

拷贝继承，子类继承父类的实例就不会改动父类的原型链上的方法和属性了；
但是子类的实例也还是父类的实例，instanceof方法就知道
function SubType (age){
		SuperType.call(this,name);
		this.age= age;
		this.sayAge = function (){
			alert(this.age);
			}
		}
		(function(){
			var Temp =function (){};
			Temp.prototype=SuperType.prototype;
			Subtype.prototype=new Temp();
		})();

响应式布局与自适应布局：
自适应的目的是在不同分辨率的不同设备上面显示相同的页面。
响应式的概念应该是覆盖了自适应，但是包括的东西更多了。响应式布局可以根据屏幕的大小自动的调整页面的展现方式，以及布局。
<link rel="stylesheet" type="text/css" media="screen and (max-device-width: 400px)" href="tinyScreen.css" />

status 属性可设置或返回窗口状态栏中的文本。
window.status='状态栏信息'

window -- document/history/frames/navigator/location/screen
	  document -- location

null instanceof Object 是false

DOCTYPE标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。

var e=Math.pow(2,2);
var s=e-100;
var count=0;
for(var i=s;i<=e;i++){
 count++;
}
console.log(count);

var length=10;
function fn(){
 console.log(this.length);
}
var obj={
 length:5,
 method:function(fn){
  fn();
  arguments[0]();
 }
};
obj.method(fn,1);

javascript是面向对象的.

XHTML与HTML的区别：
XHTML 元素必须被正确地嵌套。
XHTML 元素必须被关闭。
标签名必须用小写字母。
XHTML 文档必须拥有根元素。

CSS3新特性：
1.CSS3的选择器
  1）E:last-child 匹配父元素的最后一个子元素E。
  2）E:nth-child(n)匹配父元素的第n个子元素E。
  3）E:nth-last-child(n) CSS3 匹配父元素的倒数第n个子元素E。
2. @Font-face 特性
3. 圆角
4. 多列布局 （multi-column layout）---兼容性不好，还不够成熟。还不能用在实际项目中。
5.阴影（Shadow）
6.CSS3 的渐变效果 
7.css弹性盒子模型
8.CSS3制作特效
  1) Transition 对象变换时的过渡效果
  缩写方式：
  transition:border-color .5s ease-in .1s, background-color .5s ease-in .1s, color .5s ease-in .1s;
  2) Transforms 2D转换效果
  主要包括 translate（水平移动）、rotate（旋转）、scale（伸缩）、skew（倾斜）
  3) Animation动画特效
  
添加元素：
  Document.createElement() // 创建元素
  let element = document.createElement(tagName[, options])

  Document.createTextNode() // 创建一个新的文本节点
  var text = document.createTextNode(data)

  Document.createAttribute() // 创建并返回一个新的属性节点
  attribute = document.createAttribute(name)

  Document.createComment() // 创建并返回一个注释节点
  var commentNode = document.createComment(data)
  
  Document.createDocumentFragment() // 创建一个新的空的文档片段
  var docFragment = document.createDocumentFragment()

  Node.appendChild() // 将一个节点添加到指定父节点的子节点列表末尾
  var child = node.appendChild(child)

  Element.classList.add() // 添加指定的类值class
  elementNodeReference.classList.add( String [, String] )

  Document.write()  
  Document.writeIn() // 将文本字符串写入打开的文档流
  document.write(markup)
  document.writeIn(line)
  document.write()和writeIn()的区别是前者没有换行，而后者有换行。

  Element.removeAttribute() // 从元素中删除指定的属性
  element.removeAttribute(attrName)

  Element.removeChild(）// 删除子元素
  var oldChild = node.removeChild(child);OR element.removeChild(child);

  ChildNode.remove() // 删除元素
  elementNodeReference.remove()

  Child.parentNode.removeChild(child) // 不确定父元素时可这样删除子元素
  if (node.parentNode) {
  //判断node是否在DOM树中
    node.parentNode.removeChild(node);
  }

  Element.classList.remove() // 移除元素中一个或多个类名
  elementNodeReference.classList.remove( String [,String] )

  Node.innerText // 修改元素文本内容
  Node.innerHTML =new content

  Element.innerHTML // 设置或获取描述元素后代的HTML语句
  const content = element.innerHTML;
  // 返回时，内容包含描述所有元素后代的序列化HTML代码。
  element.innerHTML = markup;
  // 除所有元素的子节点，解析内容字符串，并将生成的节点分配给元素的子元素。

  node.cloneNode() // 拷贝元素(包括所有属性和值)
  var dupNode = node.cloneNode(deep)
  <!--example-->
  <body>
  <ul id="myList1">
      <li>iPhone</li>
      <li>iPad</li>
  </ul>
  <ul id="myList2">
      <li>Macbook</li>
      <li>appleMusic</li >
  </ul>
  <button onclick="myFunction()">复制</button>
  <script>
  function myFunction(){
      var itm=document.getElementById("myList2").lastChild;
      var cln=itm.cloneNode(true);
      document.getElementById("myList1").appendChild(cln);
  }
  </script>
  </body>
  <!--点击复制按钮，myList2中最后元素会复制到myList1中-->

  Element.setAttribute() // 设置或者改变指定属性并指定值
  element.setAttribute(name, value)

  style.property = new style // 修改元素CSS属性值
  var title= document.querySelector("h1")
  title.style.backgroundColor = "red" // h1背景色改为红色

  Node.replaceChild() // 替换子节点
  replacedNode = parentNode.replaceChild(newChild, oldChild)

  attribute.getAttribute() // 返回元素的指定属性值
  let attribute = element.getAttribute(attributeName)

  Document.getElementsByClassName() // 返回一个节点列表（数组），包含了所有拥有指定 class 的子元素
  var elements = document.getElementsByClassName(names); // or:
  var elements = rootElement.getElementsByClassName(names);

  Document.getElementsByName() // 返回带有指定名称的对象集合
  elements = document.getElementsByName(name)

  Document.getElementsByTagName() // 返回带有指定标签名的对象集合
  var elements = document.getElementsByTagName(name)

  Document.getElementById() // 返回对拥有指定 id 的第一个对象的引用
  element = document.getElementById(id)

  Document.querySelector() // 返回文档中匹配指定的CSS选择器的第一元素
  element = document.querySelector(selectors) // 语法
  //example
  document.querySelector("#demo") // 获取文档中ID为demo的元素

  Document.querySelectorAll() // 返回与指定的选择器组匹配的文档中的元素列表
  elementList = document.querySelectorAll(selectors)

function test(a){
  argument[0]=2;
  console.log(a);
}
test();//undefine

背景弹窗
.bg{position:fixed;left:0;top:0;width:100%;height:100%;overflow:auto;z-index:100;background:rgba();backdrop-filter:blur(10px);}
.bg .wrapper{width:100%;min-width:100%;}
.bg close_wrapper{width:50px;height:50px;margin:-50px auto 0;clear:both;}
.bg .wrapper .content{padding-bottom:50px;}
--文字--
<div class='wrapper'>
  <div class='line'></div>
  <div class='text'></div>
  <div class='line'></div>
</div>
.wrapper{display:flex;width:80%;}
.wrapper .line{flex:1;position:relative;top:-6px;border-bottom:1px solid rgba(255,255,255,.2);}
.wrapper .text{padding:0 12px;font-weight:700;font-size:14px;}

获取页面所有的checkbox，不使用第三方库
var inputs=document.getElementsByTagName("input");
var arr=[];
for(var i=0;i<inputs.length;i++){
  if(inputs[i].type=='checkbox')
    arr.push(inputs[i]);
}

var f=function g(){return 23;};
typeof g();//g is not defined

function fn(a){
  console.log(a);
  var a=2;
  function a(){};
  console.log(a);
};
fn(1);//函数声明优先于函数声明，但我第一次认为第一个输出是undefined；但输出的是function a(){};说明var a被略过了。

var a=10;
a.pro=10;
console.log(a.pro+a);//NaN
var s='hello';
s.pro='world';
console.log(s.pro+s);//undefinedhello

console.log(typeof fn);//function原因同上上
function fn(){};
var fn;

		function JSClass(){
			this.m_Text='dongdongSeven';
			this.m_Element=document.createElement('div');
			this.m_Element.innerHTML=this.m_Text;
			this.m_Element.addEventListener('click',this.func);//undefined
			this.m_Element.addEventListener('click',this.func.bind(this));//dongdongSeven
		}
		JSClass.prototype.Render=function(){
			document.body.appendChild(this.m_Element);
		};
		JSClass.prototype.func=function(){
			console.log(this.m_Text);
		};
		var jc=new JSClass();
		jc.Render();
		jc.func();

		(function(){
			return console.log(typeof arguments);
		})();//Object

		if('a' in window){//注意书写'a'
			var a=10;
		};
		console.log(a);

		function test(obj){
			obj.name='q';
			obj=new Object();
			obj.name='w';
		}
		var person=new Object();
		test(person);
		console.log(person.name);//'q'

                //去掉字符串收尾的空白
		str.replace(/(^\s*)|(\s*$)/);

$("#test span")效率高于$("#test").find("span");

寄生组合继承：父原型链增加东西，子原型实例能继承；子原型链增加东西，父原型实例不能继承；Cat.prototype.constructor=Cat;

meta name="format-detection" content="telephone=no"  telephone=no就禁止了把数字转化为拨号链接！

link与@import:
区别：同时加载
前者无兼容性，后者CSS2.1以下浏览器不支持
Link支持使用javascript改变样式，后者不可

IE与非IE的兼容写法
var event=event||window.event;
document.documentElement.clientWidth||document.body.clientWidth;
var target=event.srcElement||event.target;

IE和DOM事件流的区别：
1、事件流的区别 
IE采用冒泡型事件 Netscape使用捕获型事件 DOM使用先捕获后冒泡型事件 
2、事件侦听函数的区别 
IE使用: 
[Object].attachEvent("on_name_of_event_handler", fnHandler); //绑定函数 
[Object].detachEvent("on_name_of_event_handler", fnHandler); //移除绑定 

DOM使用： 
[Object].addEventListener("name_of_event", fnHandler, bCapture); //绑定函数 
[Object].removeEventListener("name_of_event", fnHandler, bCapture); //移除绑定 

javascript的本地对象，内置对象和宿主对象
本地对象为Array,Object,RegExp等可以new实例化
内置对象为gload,Math的等不可以实例化的
宿主为浏览器自带的document,window等

异步ajax的优缺点都有什么？
优点：
1、相对于同步ajax：不会造成UI卡死，用户体验好。
2、相对于刷新页面，省流量。
缺点：
1、后退按钮失效
2、多个请求同时出发时，由于回调时间不确定，会造成混乱，避免这种混乱需要复杂的判断机制。
3、搜索引擎不友好。
4、数据安全

<meta name='renderer' content='webkit'/> 优先用webkit内核，现在浏览器一般是双核：webkit与IE
<meta http-equiv='X-UA-Compatible' content='IE=Edge,chrome=1'/>让IE浏览使用最高级别的渲染，如果有
<link rel='dns-prefetch' href='//static.360buyimg.com'/>DNS预解析crome就用它

jquery:核心架构、事件委托、插件机制、兼容性（去jquery浏览量高的看看）
页面布局、CSS盒模型、DOM事件、HTTP/HTTP2/HTTPS/WS、面向对象、原型链、通信（跨域，前后端）、安全（XSS）、算法
三栏布局：float,position,flex,display:tabel-cell,网格